{"ast":null,"code":"import { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport class AuthInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(request, next) {\n    const auth = this.injector.get(AuthService);\n    request = request.clone({\n      setHeaders: {\n        'x-auth-token': `${auth.getToken()}`\n      }\n    });\n    return next.handle(request);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i0.Injector));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});","map":{"version":3,"mappings":"AASA,SAAQA,WAAW,QAAO,gBAAgB;;AAG1C,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAC5B;EAEAC,SAAS,CAACC,OAAyB,EAAEC,IAAiB;IAEvD,MAAMC,IAAI,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACR,WAAW,CAAC;IAC3CK,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;MACtBC,UAAU,EAAE;QACV,cAAc,EAAE,GAAGH,IAAI,CAACI,QAAQ,EAAE;;KAErC,CAAC;IAEF,OAAOL,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC1B;;AAfWJ,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAY,SAAfZ,eAAe;AAAA","names":["AuthService","AuthInterceptor","constructor","injector","intercept","request","next","auth","get","clone","setHeaders","getToken","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\mateu\\Desktop\\studia\\technologie aplikacji webowych\\projekt\\client\\src\\app\\services\\auth.interceptor.ts"],"sourcesContent":["import {Injectable, Injector} from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor\r\n} from '@angular/common/http';\r\n\r\nimport {Observable} from 'rxjs';\r\nimport {AuthService} from './auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private injector: Injector) {\r\n  }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n\tconst auth = this.injector.get(AuthService);\r\n\trequest = request.clone({\r\n  \tsetHeaders: {\r\n    \t'x-auth-token': `${auth.getToken()}`\r\n  \t}\r\n\t});\r\n\r\n\treturn next.handle(request);\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}