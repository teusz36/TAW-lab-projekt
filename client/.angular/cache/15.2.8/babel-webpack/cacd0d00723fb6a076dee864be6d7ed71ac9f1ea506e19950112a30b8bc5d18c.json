{"ast":null,"code":"import { JwtHelperService } from \"@auth0/angular-jwt\";\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:3001/api';\n  }\n  authenticate(credentials) {\n    return this.http.post(this.url + '/user/auth', {\n      login: credentials.login,\n      password: credentials.password\n    }).pipe(map(result => {\n      if (result && result.token) {\n        localStorage.setItem('token', result.token);\n        return true;\n      }\n      return false;\n    }));\n  }\n  createOrUpdate(credentials) {\n    console.log(credentials);\n    return this.http.post(this.url + '/user/create', credentials);\n  }\n  logout() {\n    return this.http.delete(this.url + '/user/logout/' + this.currentUser.userId).pipe(map(() => {\n      localStorage.removeItem('token');\n    }));\n  }\n  isLoggedIn() {\n    const jwtHelper = new JwtHelperService();\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n    return !jwtHelper.isTokenExpired(token);\n  }\n  get currentUser() {\n    const token = this.getToken();\n    if (!token) {\n      return null;\n    }\n    return new JwtHelperService().decodeToken(token);\n  }\n  isAdmin() {\n    console.log(this.currentUser);\n    return this.currentUser.isAdmin;\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAQA,gBAAgB,QAAO,oBAAoB;AACnD,SAAQC,GAAG,QAAO,gBAAgB;;;AAOlC,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,QAAG,GAAG,2BAA2B;EAGzC;EAEAC,YAAY,CAACC,WAAgB;IAE9B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACC,GAAG,GAAG,YAAY,EAAE;MAC7CC,KAAK,EAAEH,WAAW,CAACG,KAAK;MACxBC,QAAQ,EAAEJ,WAAW,CAACI;KACvB,CAAC,CAACC,IAAI,CACLV,GAAG,CAAEW,MAAmB,IAAI;MAC1B,IAAIA,MAAM,IAAIA,MAAM,CAACC,KAAK,EAAE;QAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,MAAM,CAACC,KAAK,CAAC;QAC3C,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACA;EAEAG,cAAc,CAACV,WAAgB;IAChCW,OAAO,CAACC,GAAG,CAACZ,WAAW,CAAC;IACxB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,IAAI,CAACC,GAAG,GAAG,cAAc,EAAEF,WAAW,CAAC;EAC5D;EAEAa,MAAM;IACP,OAAO,IAAI,CAACf,IAAI,CAACgB,MAAM,CAAC,IAAI,CAACZ,GAAG,GAAG,eAAe,GAAG,IAAI,CAACa,WAAW,CAACC,MAAM,CAAC,CAC1EX,IAAI,CACHV,GAAG,CAAC,MAAK;MACPa,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;IAClC,CAAC,CAAC,CACH;EACF;EAEAC,UAAU;IACX,MAAMC,SAAS,GAAG,IAAIzB,gBAAgB,EAAE;IACxC,MAAMa,KAAK,GAAGC,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACb,KAAK,EAAE;MACV,OAAO,KAAK;;IAEd,OAAO,CAAEY,SAAS,CAACE,cAAc,CAACd,KAAK,CAAE;EACxC;EAEA,IAAIQ,WAAW;IAChB,MAAMR,KAAK,GAAG,IAAI,CAACe,QAAQ,EAAE;IAC7B,IAAI,CAACf,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb,OAAO,IAAIb,gBAAgB,EAAE,CAAC6B,WAAW,CAAChB,KAAK,CAAC;EAC/C;EAEAiB,OAAO;IACLb,OAAO,CAACC,GAAG,CAAC,IAAI,CAACG,WAAW,CAAC;IAC7B,OAAO,IAAI,CAACA,WAAW,CAACS,OAAO;EACjC;EAEAF,QAAQ;IACT,OAAOd,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EACnC;;AA9DWxB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA6B,SAAX7B,WAAW;EAAA8B,YAFV;AAAM","names":["JwtHelperService","map","AuthService","constructor","http","authenticate","credentials","post","url","login","password","pipe","result","token","localStorage","setItem","createOrUpdate","console","log","logout","delete","currentUser","userId","removeItem","isLoggedIn","jwtHelper","getItem","isTokenExpired","getToken","decodeToken","isAdmin","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\mateu\\Desktop\\studia\\technologie aplikacji webowych\\projekt\\client\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {JwtHelperService} from \"@auth0/angular-jwt\";\nimport {map} from 'rxjs/operators';\nimport {Token} from \"../models/token\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private url = 'http://localhost:3001/api';\n\n  constructor(private http: HttpClient) {\n  }\n\n  authenticate(credentials: any) {\n\n\treturn this.http.post(this.url + '/user/auth', {\n  \tlogin: credentials.login,\n  \tpassword: credentials.password\n\t}).pipe(\n  \tmap((result: Token | any) => {\n    \tif (result && result.token) {\n      \tlocalStorage.setItem('token', result.token);\n      \treturn true;\n    \t}\n    \treturn false;\n  \t})\n\t);\n  }\n\n  createOrUpdate(credentials: any) {\n\tconsole.log(credentials)\n\treturn this.http.post(this.url + '/user/create', credentials);\n  }\n\n  logout() {\n\treturn this.http.delete(this.url + '/user/logout/' + this.currentUser.userId)\n  \t.pipe(\n    \tmap(() => {\n      \tlocalStorage.removeItem('token');\n    \t})\n  \t);\n  }\n\n  isLoggedIn() {\n\tconst jwtHelper = new JwtHelperService();\n\tconst token = localStorage.getItem('token');\n\tif (!token) {\n  \treturn false;\n\t}\n\treturn !(jwtHelper.isTokenExpired(token));\n  }\n\n  get currentUser() {\n\tconst token = this.getToken();\n\tif (!token) {\n  \treturn null;\n\t}\n\n\treturn new JwtHelperService().decodeToken(token);\n  }\n\n  isAdmin() {\n    console.log(this.currentUser);\n    return this.currentUser.isAdmin;\n  }\n\n  getToken() {\n\treturn localStorage.getItem('token');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}